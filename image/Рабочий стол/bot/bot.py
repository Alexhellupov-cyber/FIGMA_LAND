import telebot
from telebot import types

# –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_API_TOKEN' –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π API —Ç–æ–∫–µ–Ω
bot = telebot.TeleBot('7296845868:AAFWvXxzvSeFvN4DEekD9FJDKIZWd_LDoFE')

if usd_or_rub.lower() == "usd":
    —Åurrency_sign = "$"
elif usd_or_rub.lower() == "rub":
    —Åurrency_sign = "‚ÇΩ"


def get_price():
    if currency.upper() == "BTC":
        response = requests.get(
            f"https://api.coingecko.com/api/v3/coins/markets?vs_currency={usd_or_rub}&ids=bitcoin").json()
    elif currency.upper() == "ETH":
        response = requests.get(
            f"https://api.coingecko.com/api/v3/coins/markets?vs_currency={usd_or_rub}&ids=ethereum").json()
    elif currency.upper() == "USDT":
        response = requests.get(
            f"https://api.coingecko.com/api/v3/coins/markets?vs_currency={usd_or_rub}&ids=tether").json()
    elif currency.upper() == "BNB":
        response = requests.get(
            f"https://api.coingecko.com/api/v3/coins/markets?vs_currency={usd_or_rub}&ids=binancecoin").json()
    elif currency.upper() == "SOL":
        response = requests.get(
            f"https://api.coingecko.com/api/v3/coins/markets?vs_currency={usd_or_rub}&ids=solana").json()
    elif currency.upper() == "XRP":
        response = requests.get(
            f"https://api.coingecko.com/api/v3/coins/markets?vs_currency={usd_or_rub}&ids=ripple").json()
    elif currency.upper() == "ADA":
        response = requests.get(
            f"https://api.coingecko.com/api/v3/coins/markets?vs_currency={usd_or_rub}&ids=cardano").json()
    elif currency.upper() == "DOGE":
        response = requests.get(
            f"https://api.coingecko.com/api/v3/coins/markets?vs_currency={usd_or_rub}&ids=dogecoin").json()
    elif currency.upper() == "TON":
        response = requests.get(
            f"https://api.coingecko.com/api/v3/coins/markets?vs_currency={usd_or_rub}&ids=the-open-network").json()
    price = response[0]["current_price"]
    return price

async def main_message(user_id):
    try:
        referrals = len(await select_user_id_where_referrer_id_and_referrer_bonus_1(user_id))
    except:
        referrals = 0
    await bot.send_message(user_id,
        "<b>ü•≥ –î–∞—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–∫–∏ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ</b>\n\n"
        f"<b>–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –¥—Ä—É–∑—å—è–º –ø–æ–¥–∞—Ä–∫–∏ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É. –í—ã–≤–æ–¥ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–∏ <code>{minimal_withdrawal_amount} {currency}</code> –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.</b>\n\n"
        f"<b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n"
        f"<b><code>https://t.me/{(await bot.get_me())['username']}?start={user_id}</code></b>\n\n"
        f"<b>–í–∞—à–∞ –¥–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ: <code>{await select_entry_date_where_user_id(user_id)}</code> (–ü–æ –ú–°–ö)</b>\n\n"
        f"<b>–ù–∞—à <a href='https://t.me/{channel[1:]}'>–∫–∞–Ω–∞–ª</a> –≤ –¢–µ–ª–µ–≥—Ä–∞–º–º–µ:</b>\n"
        f"<b><code>https://t.me/{channel[1:]}</code></b>\n\n"
        f"<b>–£ –≤–∞—Å <code>{referrals}</code> –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤</b>\n\n"
        f"<b>–í–∞—à –±–∞–ª–∞–Ω—Å: <code>{float((Decimal(await select_user_balance_where_user_id(user_id))).quantize(Decimal('1.1000000')))} {currency}</code>   (<code>{float((Decimal(await select_user_balance_where_user_id(user_id)) * Decimal(get_price())).quantize(Decimal('1.10')))}{—Åurrency_sign}</code>)</b>\n\n"
        f"<b>–í–∞—à ID: <code>{user_id}</code></b>",
            reply_markup=await main_menu_keyboard())

async def no_follow_message(user_id):
    await bot.send_message(user_id,
        f"<b>–í–∞—à –¥—Ä—É–≥ –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç {currency}, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏—Ö –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ <a href='https://t.me/{channel[1:]}'>–∫–∞–Ω–∞–ª</a> –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ —ç—Ç—É –∫–Ω–æ–ø–∫—É.</b>\n\n"
        f"<b>{channel}</b>",
            reply_markup=await update_follow_menu_keyboard(channel))



@dp.message_handler(commands="admin")
async def admin_menu(message: types.Message):
    user_id = message.from_user.id
    await message.delete()
    for i in range(0, len(admins_id)):
        if user_id == admins_id[i]:
            await bot.send_message(user_id,
                "<b>–í–∫–ª—é—á–µ–Ω–æ –∞–¥–º–∏–Ω –º–µ–Ω—é</b>",
                    reply_markup=await admin_menu_keyboard())


@dp.message_handler(commands="start")
async def start_command(message: types.Message):
    user_id = message.from_user.id
    user_username = message.from_user.username
    if await select_user_id_where_user_id(user_id) is None:
        try:
            referrer = int(message.text.split()[1])
            if user_id != referrer:
                referrer_bonus = 0
            else:
                referrer = None
                referrer_bonus = 1
        except:
            referrer = None
            referrer_bonus = 1
        try:
            user_username = user_username.lower()
        except:
            user_username = None
        await adding_data(user_id, user_username, referrer, referrer_bonus, datetime.datetime.now().strftime("%d-%m-%Y %H:%M:%S"))
    user_channel_status = await bot.get_chat_member(chat_id=channel, user_id=user_id)
    if user_channel_status["status"] != "left":
        await main_message(user_id)
    else:
        await no_follow_message(user_id)


### ---___--- –Æ–ó–ï–† –ú–ï–ù–Æ ---___--- ###


@dp.callback_query_handler(text="update_balance")
async def update_balance_call(call: types.CallbackQuery):
    await call.message.delete()
    user_id = call.from_user.id
    user_username = call.from_user.username
    try:
        user_username = user_username.lower()
    except:
        user_username = None
    await changing_username_where_user_id(user_username, user_id)
    user_channel_status = await bot.get_chat_member(chat_id=channel, user_id=user_id)
    if user_channel_status["status"] != "left":
        await main_message(user_id)
    else:
        await no_follow_message(user_id)

@dp.callback_query_handler(text="withdraw_funds")
async def withdraw_funds_call(call: types.CallbackQuery):
    user_id = call.from_user.id
    if await select_user_balance_where_user_id(user_id) < minimal_withdrawal_amount:
        await bot.answer_callback_query(call.id, text=
            "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
    else:
        await bot.send_message(user_id,
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞ –±–∞–ª–∞–Ω—Å–∞",
            reply_markup=await deleted_message_menu_keyboard())
        await withdrawal_of_balance.withdrawal_amount_state.set()


@dp.callback_query_handler(text="update_follow")
async def update_follow_call(call: types.CallbackQuery):
    await call.message.delete()
    user_id = call.from_user.id
    user_username = call.from_user.username
    user_channel_status = await bot.get_chat_member(chat_id=channel, user_id=user_id)
    if user_channel_status["status"] != "left":
        if await select_referrer_bonus_where_user_id(user_id) == 0:
            await adding_user_balance_where_user_id(await select_referrer_id_where_user_id(user_id))
            await changing_referrer_bonus_where_user_id(1, user_id)
            await main_message(user_id)
            try:
                await bot.send_message(await select_referrer_id_where_user_id(user_id),
                    f"<b>–£ –≤–∞—Å –Ω–æ–≤—ã–π –†–µ—Ñ–µ—Ä–∞–ª ({user_username.lower()}), –≤–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <code>{amount_per_one} {currency}</code></b>\n"
                    f"<b>–í–∞—à –±–∞–ª–∞–Ω—Å: <code>{float(Decimal(await select_user_balance_where_user_id(await select_referrer_id_where_user_id(user_id))).quantize(Decimal('1.1000000')))} {currency}</code>   ({float(Decimal((Decimal(await select_user_balance_where_user_id(await select_referrer_id_where_user_id(user_id))) * Decimal(get_price()))).quantize(Decimal('1.10')))}{—Åurrency_sign})</b>",
                        reply_markup=await deleted_message_menu_keyboard())
            except:
                await bot.send_message(await select_referrer_id_where_user_id(user_id),
                    f"<b>–£ –≤–∞—Å –Ω–æ–≤—ã–π –†–µ—Ñ–µ—Ä–∞–ª ({user_id}), –≤–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <code>{amount_per_one} {currency}</code></b>\n"
                    f"<b>–í–∞—à –±–∞–ª–∞–Ω—Å: <code>{float(Decimal(await select_user_balance_where_user_id(await select_referrer_id_where_user_id(user_id))).quantize(Decimal('1.1000000')))} {currency}</code>   ({float(Decimal((Decimal(await select_user_balance_where_user_id(await select_referrer_id_where_user_id(user_id))) * Decimal(get_price()))).quantize(Decimal('1.10')))}{—Åurrency_sign})</b>",
                        reply_markup=await deleted_message_menu_keyboard())
    else:
        await no_follow_message(user_id)


@dp.message_handler(state=withdrawal_of_balance.withdrawal_amount_state)
async def withdraw_funds_call(message: types.Message):
    user_id = message.from_user.id
    user_username = message.from_user.username
    withdrawal_amount = message.text
    if await select_user_balance_where_user_id(user_id) > float(withdrawal_amount) > minimal_withdrawal_amount:
        await changing_user_balance_where_user_id((await select_user_balance_where_user_id(user_id) - float(withdrawal_amount)), user_id)
        await message.delete()
        await bot.send_message(user_id,
            "<b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤:</b>\n"
            f"<b>–°—É–º–º–∞: <code>{withdrawal_amount} {currency}</code></b>\n"
            f"<b>–í–∞—à ID: {user_id}</b>\n"
            f"<b>–í —Å–ª—É—á–∞–µ –∫–∞–∫–∏—Ö –ª–∏–±–æ –ø—Ä–æ–±–ª–µ–º —Å –≤—ã–≤–æ–¥–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è: {admin_username}</b>\n",
                reply_markup=await deleted_message_menu_keyboard())
        for i in range(0, len(admins_id)):
            if user_id == admins_id[i]:
                await bot.send_message(user_id,
                    f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_username} ({user_id}) —Ö–æ—á–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ {withdrawal_amount} {currency}</b>",
                        reply_markup=await deleted_message_menu_keyboard())
    else:
        if float(withdrawal_amount) > await select_user_balance_where_user_id(user_id):
            await message.delete()
            await bot.send_message(user_id,
                "–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤",
                    reply_markup=await deleted_message_menu_keyboard())
        elif minimal_withdrawal_amount > float(withdrawal_amount):
            await message.delete()
            await bot.send_message(user_id,
                f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤: {minimal_withdrawal_amount}",
                    reply_markup=await deleted_message_menu_keyboard())


### ---___--- –ê–î–ú–ò–ù –ú–ï–ù–Æ ---___--- ###


@dp.callback_query_handler(text="number_users")
async def number_users_admin(call: types.CallbackQuery):
    user_id = call.from_user.id
    await bot.send_message(user_id,
        f"<b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>: {len(await select_all_user_id())}",
            reply_markup=await info_menu_keyboard())


@dp.callback_query_handler(text="update_info")
async def update_number_users_admin(call: types.CallbackQuery):
    await call.message.delete()
    user_id = call.from_user.id
    await bot.send_message(user_id,
        f"<b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(await select_all_user_id())}</b>",
            reply_markup=await info_menu_keyboard())


@dp.callback_query_handler(text="download_database")
async def download_database_admin(call: types.CallbackQuery):
    user_id = call.from_user.id
    await bot.send_document(user_id,
        open("database.db", "rb"),
            reply_markup=await deleted_message_menu_keyboard())


@dp.callback_query_handler(text="private_message")
async def private_message_admin(call: types.CallbackQuery):
    user_id = call.from_user.id
    await bot.send_message(user_id,
        "<b>–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ª–∏–±–æ Username</b>",
            reply_markup=await deleted_message_menu_keyboard())
    await private_message.id_or_username_state.set()


@dp.callback_query_handler(text="mailing")
async def send_all_admin(call: types.CallbackQuery):
    user_id = call.from_user.id
    await bot.send_message(user_id,
        "<b>–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±–µ—â–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏</b>",
            reply_markup=await deleted_message_menu_keyboard())
    await receiving_a_message.receiving_message_state.set()


@dp.callback_query_handler(text="changing_balance")
async def changing_balance_admin(call: types.CallbackQuery):
    user_id = call.from_user.id
    await bot.send_message(user_id,
        "<b>–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ª–∏–±–æ Username</b>",
            reply_markup=await deleted_message_menu_keyboard())
    await changing_the_balance.id_or_username_state.set()


@dp.message_handler(state=private_message.id_or_username_state)
async def private_message_id_or_username_admin_handler(message: types.Message, state: FSMContext):
    await message.delete()
    username_or_id = message.text
    if username_or_id.isnumeric():
        try:
            if username_or_id == str((await select_user_id_where_user_id(username_or_id))[0]):
                await state.update_data(username_or_id=username_or_id)
                await bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id - 1,
                                            text="<b>–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏</b>",
                                            reply_markup=await deleted_message_menu_keyboard())
                await private_message.private_message_state.set()
        except:
            await bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id - 1,
                                        text="<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>",
                                        reply_markup=await deleted_message_menu_keyboard())
            await state.finish()
    else:
        try:
            username_or_id = username_or_id.replace("@", "").lower()
            if username_or_id == str(await select_user_username_where_user_name(username_or_id)):
                await state.update_data(username_or_id=username_or_id)
                await bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id - 1,
                                            text="<b>–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏</b>",
                                            reply_markup=await deleted_message_menu_keyboard())
                await private_message.private_message_state.set()
        except:
            await bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id - 1,
                                        text="<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>",
                                        reply_markup=await deleted_message_menu_keyboard())
            await state.finish()


@dp.message_handler(state=private_message.private_message_state)
async def private_message_private_message_admin_handler(message: types.Message, state: FSMContext):
    private_message_text = message.text
    await message.delete()
    data = await state.get_data()
    username_or_id = data.get("username_or_id")
    if username_or_id.isnumeric():
        await bot.send_message(username_or_id,
            private_message_text,
                reply_markup=await deleted_message_menu_keyboard())
    else:
        username_or_id = await select_user_id_where_user_username(username_or_id)
        await bot.send_message(username_or_id,
            private_message_text,
                reply_markup=await deleted_message_menu_keyboard())

    await bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id - 2,
                                text=f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username_or_id} –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ {private_message_text}</b>",
                                reply_markup=await deleted_message_menu_keyboard())
    await state.finish()


@dp.message_handler(state=receiving_a_message.receiving_message_state)
async def receiving_a_message_receiving_message_admin_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text
    await state.finish()
    await message.delete()
    for users in await select_all_user_id():
        try:
            await bot.send_message(chat_id=users[0], text=text,
                                   reply_markup=await deleted_message_menu_keyboard())
        except:
            pass
    await bot.send_message(user_id, "<b>–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>",
                           reply_markup=await deleted_message_menu_keyboard())


@dp.message_handler(state=changing_the_balance.id_or_username_state)
async def changing_the_balance_id_or_username_admin_handler(message: types.Message, state: FSMContext):
    username_or_id = message.text
    await message.delete()
    username_or_id = username_or_id.replace("@", "").lower()
    if username_or_id.isnumeric():
        try:
            if username_or_id == str((await select_user_id_where_user_id(username_or_id))[0]):
                await state.update_data(username_or_id=username_or_id)
                await bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id - 1,
                                            text="<b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –Ω–∞ –∫–∞–∫–æ–µ –∏–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å</b>",
                                            reply_markup=await deleted_message_menu_keyboard())
                await changing_the_balance.change_amount_state.set()
        except:
            await bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id - 1,
                                        text="<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>",
                                        reply_markup=await deleted_message_menu_keyboard())
            await state.finish()
    else:
        try:
            if username_or_id == str(await select_user_username_where_user_name(username_or_id)):
                await state.update_data(username_or_id=username_or_id)
                await bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id - 1,
                                            text="<b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –Ω–∞ –∫–∞–∫–æ–µ –∏–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å</b>",
                                            reply_markup=await deleted_message_menu_keyboard())
                await changing_the_balance.change_amount_state.set()
        except:
            await bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id - 1,
                                        text="<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>",
                                        reply_markup=await deleted_message_menu_keyboard())
            await state.finish()


@dp.message_handler(state=changing_the_balance.change_amount_state)
async def changing_the_balance_change_amount_admin_handler(message: types.Message, state: FSMContext):
    change_amount_state = message.text
    await message.delete()
    await state.update_data(change_amount=change_amount_state)
    data = await state.get_data()
    username_or_id = data.get("username_or_id")
    change_amount_state = data.get("change_amount")
    if username_or_id.isnumeric():
        await changing_user_balance_where_user_id(change_amount_state, username_or_id)
    else:
        await changing_user_balance_where_user_username(change_amount_state, username_or_id)
    await bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id - 2,
                                text=f"<b>–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username_or_id} –±–∞–ª–∞–Ω—Å {change_amount_state}</b>",
                                reply_markup=await deleted_message_menu_keyboard())
    await state.finish()


### ---___--- –£–î–ê–õ–ï–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–ô ---___--- ###


@dp.callback_query_handler(text="deleted_message", state="*")
async def deleted_message_call(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.delete()


### ---___--- –ò–ù–õ–ê–ô–ù –°–û–û–ë–©–ï–ù–ò–Ø ---___--- ###


@dp.inline_handler()
async def inline_handler(query: types.InlineQuery):
    all_text = ["ü•≥ –•–æ—á—É –ø–æ–¥–∞—Ä–∏—Ç—å —Ç–µ–±–µ –Ω–µ–º–Ω–æ–≥–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã",
                f"ü•≥ –ü—Ä–∏–≤–µ—Ç, —Ö–æ—á—É –ø–æ–¥–∞—Ä–∏—Ç—å —Ç–µ–±–µ –Ω–µ–º–Ω–æ–≥–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã {currency}",
                f"ü•≥ –ü—Ä–∏–≤–µ—Ç, –º–Ω–µ —Ç–æ–∂–µ –∑–∞—Ö–æ—Ç–µ–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —ç—Ç–æ–º—É —Ç—Ä–µ–Ω–¥—É –∏ –ø–æ–¥–∞—Ä–∏—Ç—å —Ç–µ–±–µ –Ω–µ–º–Ω–æ–≥–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã {currency}",
                f"ü•≥ –ü—Ä–∏–≤–µ—Ç, —É –º–µ–Ω—è –¥–ª—è —Ç–µ–±—è –µ—Å—Ç—å –ø–æ–¥–∞—Ä–æ–∫ ‚Äî –Ω–µ–º–Ω–æ–≥–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã {currency}"]

    random_text = random.choice(all_text)
    text = query.query or "echo"
    result_id: str = hashlib.md5(text.encode()).hexdigest()

    articles = [types.InlineQueryResultArticle(
        id=result_id,
        title=random_text,
        reply_markup=await get_gift_menu_keyboard((await bot.get_me())["username"], query.from_user.id),
        input_message_content=types.InputMessageContent(
            message_text=random_text))]
    await query.answer(articles, cache_time=1, is_personal=True)





if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(create_database())
    executor.start_polling(dp)
